// Generated by Apple Swift version 4.1 effective-3.3 (swiftlang-902.0.48 clang-902.0.37.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import AppKit;
@import SpriteKit;
@import Foundation;
@import CoreGraphics;
@import GameplayKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SKTiled",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


@interface NSColor (SWIFT_EXTENSION(SKTiled))
/// Initialize an SKColor with a hexidecimal string.
/// \param hexString <code>String</code> hexidecimal code.
///
///
/// returns:
/// <code>SKColor</code>
- (nonnull instancetype)initWithHexString:(NSString * _Nonnull)hexString;
/// Returns a hexadecimal string representation of the color.
///
/// returns:
/// <code>String</code> hexadecimal string.
- (NSString * _Nonnull)hexString SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) vector_float4 toVec4;
@property (nonatomic, readonly, copy) NSString * _Nonnull hexDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull rgbDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull componentDescription;
@end


@interface SKAction (SWIFT_EXTENSION(SKTiled))
/// Custom action to fade a node’s alpha after a pause.
///
/// returns:
/// <code>SKAction</code> custom fade action.
+ (SKAction * _Nonnull)fadeAfterWait:(NSTimeInterval)duration alpha:(CGFloat)alpha SWIFT_WARN_UNUSED_RESULT;
/// Performs an action after the specified delay.
+ (SKAction * _Nonnull)afterDelay:(NSTimeInterval)delay performAction:(SKAction * _Nonnull)action SWIFT_WARN_UNUSED_RESULT;
/// Performs a block after the specified delay.
+ (SKAction * _Nonnull)afterDelay:(NSTimeInterval)delay runBlock:(void (^ _Nonnull)(void))block SWIFT_WARN_UNUSED_RESULT;
/// Removes the node from its parent after the specified delay.
+ (SKAction * _Nonnull)removeFromParentAfterDelay:(NSTimeInterval)delay SWIFT_WARN_UNUSED_RESULT;
@end

@class SKTilemap;
@class SKSpriteNode;
@class NSCoder;
@class NSEvent;

/// <h2>Overview</h2>
/// The <code>SKTiledLayerObject</code> is the generic base class for all layer types.  This class doesn’t
/// define any object or child types, but provides base behaviors for layered content, including:
/// <ul>
///   <li>
///     coordinate transformations
///   </li>
///   <li>
///     validating coordinates
///   </li>
///   <li>
///     positioning and alignment
///   </li>
/// </ul>
/// <h2>Usage</h2>
/// Layer properties are accessed via the parent tilemap:
/// \code
/// layer.size            // size (in tiles)
/// layer.tileSize        // tile size (in pixels)
///
/// \endcodeCoordinate transformation functions return points in the current tilemap projection:
/// \code
/// node.position = tileLayer.pointForCoordinate(2, 1)
///
/// \endcodeCoordinate transformation functions translate points to map coordinates:
/// \code
///  coord = coordinateForPoint(touchPosition)
///
/// \endcodeReturn the tile coordinate at a mouse event (iOS):
/// \code
/// coord = imageLayer.coordinateAtTouchLocation(touchPosition)
///
/// \endcodeReturn the tile coordinate at a mouse event (macOS):
/// \code
/// coord = groupLayer.coordinateAtMouseEvent(event: mouseClicked)
///
/// \endcode
SWIFT_CLASS("_TtC7SKTiled18SKTiledLayerObject")
@interface SKTiledLayerObject : SKNode
/// Reference to the parent tilemap.
@property (nonatomic, strong) SKTilemap * _Nonnull tilemap;
/// Unique layer id.
@property (nonatomic, copy) NSString * _Nonnull uuid;
/// Layer type.
@property (nonatomic, copy) NSString * _Null_unspecified type;
/// Layer index. Matches the index of the layer in the source TMX file.
@property (nonatomic) NSInteger index;
/// Position in the render tree.
@property (nonatomic) NSInteger rawIndex;
/// Custom layer properties.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
@property (nonatomic) BOOL ignoreProperties;
/// Layer color.
@property (nonatomic, strong) NSColor * _Nonnull color;
/// Grid visualization color.
@property (nonatomic, strong) NSColor * _Nonnull gridColor;
/// Bounding box color.
@property (nonatomic, strong) NSColor * _Nonnull frameColor;
/// Layer highlight color (for highlighting tiles)
@property (nonatomic, strong) NSColor * _Nonnull highlightColor;
/// Layer highlight duration
@property (nonatomic) NSTimeInterval highlightDuration;
@property (nonatomic, readonly) BOOL isolated;
/// Layer offset value.
@property (nonatomic) CGPoint offset;
/// Layer size (in tiles).
@property (nonatomic, readonly) CGSize size;
/// Layer tile size (in pixels).
@property (nonatomic, readonly) CGSize tileSize;
/// Layer anchor point, used to position layers.
@property (nonatomic, readonly) CGPoint anchorPoint;
@property (nonatomic, readonly) CGFloat width;
@property (nonatomic, readonly) CGFloat height;
@property (nonatomic, readonly) CGFloat tileWidth;
@property (nonatomic, readonly) CGFloat tileHeight;
@property (nonatomic, readonly) CGSize sizeHalved;
@property (nonatomic, readonly) CGFloat tileWidthHalf;
@property (nonatomic, readonly) CGFloat tileHeightHalf;
@property (nonatomic, readonly) CGSize sizeInPoints;
/// Pathfinding graph.
@property (nonatomic, strong) GKGridGraph<GKGridGraphNode *> * _Null_unspecified graph;
@property (nonatomic) CGFloat gridOpacity;
/// Antialias lines.
@property (nonatomic) BOOL antialiased;
@property (nonatomic) CGFloat colorBlendFactor;
/// Render scaling property.
@property (nonatomic) CGFloat renderQuality;
/// Name used to access navigation graph.
@property (nonatomic, copy) NSString * _Nonnull navigationKey;
/// Output current zPosition
@property (nonatomic, readonly) CGFloat currentZPosition;
/// Optional background color.
@property (nonatomic, strong) NSColor * _Nullable backgroundColor;
/// Layer background sprite.
@property (nonatomic, strong) SKSpriteNode * _Nonnull background;
/// Returns the position of layer origin point (used to place tiles).
@property (nonatomic, readonly) CGPoint origin;
/// Returns the frame rectangle of the layer (used to draw bounds).
@property (nonatomic, readonly) CGRect bounds;
/// Returns the points of the layer’s bounding shape.
///
/// returns:
/// <code>[CGPoint]</code> array of points.
- (NSArray<NSValue *> * _Nonnull)getVertices SWIFT_WARN_UNUSED_RESULT;
/// Initialize via the parser.
/// <em>This intializer is meant to be called by the <code>SKTilemapParser</code>, you should not use it directly.</em>
/// \param layerName <code>String</code> layer name.
///
/// \param tilemap <code>SKTilemap</code> parent tilemap node.
///
/// \param attributes <code>[String: String]</code> dictionary of layer attributes.
///
///
/// returns:
/// <code>SKTiledLayerObject?</code> tiled layer, if initialization succeeds.
- (nullable instancetype)initWithLayerName:(NSString * _Nonnull)layerName tilemap:(SKTilemap * _Nonnull)tilemap attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes OBJC_DESIGNATED_INITIALIZER;
/// Create a new layer within the parent tilemap node.
/// \param layerName <code>String</code> layer name.
///
/// \param tilemap <code>SKTilemap</code> parent tilemap node.
///
///
/// returns:
/// <code>SKTiledLayerObject</code> tiled layer object.
- (nonnull instancetype)initWithLayerName:(NSString * _Nonnull)layerName tilemap:(SKTilemap * _Nonnull)tilemap OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Set the layer color with an <code>SKColor</code>.
/// \param color <code>SKColor</code> object color.
///
- (void)setColorWithColor:(NSColor * _Nonnull)color;
/// Set the layer color with a hex string.
/// \param hexString <code>String</code> color hex string.
///
- (void)setColorWithHexString:(NSString * _Nonnull)hexString;
/// Child layer array.
@property (nonatomic, readonly, copy) NSArray<SKTiledLayerObject *> * _Nonnull layers;
/// Returns a mouse event location in the current layer.
/// \param event <code>NSEvent</code> mouse event location.
///
///
/// returns:
/// <code>CGPoint</code> converted point in layer coordinate system.
- (CGPoint)mouseLocationWithEvent:(NSEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
/// Returns the tile coordinate at a mouse event location.
/// \param event <code>NSEvent</code> mouse event location.
///
///
/// returns:
/// <code>CGPoint</code> converted point in layer coordinate system.
- (CGPoint)coordinateAtMouseEventWithEvent:(NSEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the coordinate is valid.
/// \param x <code>Int</code> x-coordinate.
///
/// \param y <code>Int</code> y-coordinate.
///
///
/// returns:
/// <code>Bool</code> coodinate is valid.
- (BOOL)isValid:(NSInteger)x :(NSInteger)y SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the coordinate is valid.
/// \param coord <code>CGPoint</code> tile coordinate.
///
///
/// returns:
/// <code>Bool</code> coodinate is valid.
- (BOOL)isValidWithCoord:(CGPoint)coord SWIFT_WARN_UNUSED_RESULT;
/// Convert a point into the tile map’s coordinate space.
/// \param point <code>CGPoint</code> input point.
///
///
/// returns:
/// <code>CGPoint</code> point with y-value inverted.
- (CGPoint)convertPoint:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
/// Returns a point for a given coordinate in the layer, with optional offset values for x/y.
/// \param coord <code>CGPoint</code> tile coordinate.
///
/// \param offsetX <code>CGFloat</code> x-offset value.
///
/// \param offsetY <code>CGFloat</code> y-offset value.
///
///
/// returns:
/// <code>CGPoint</code> point in layer (spritekit space).
- (CGPoint)pointForCoordinateWithCoord:(CGPoint)coord offsetX:(CGFloat)offsetX offsetY:(CGFloat)offsetY SWIFT_WARN_UNUSED_RESULT;
/// Returns a tile coordinate for a given point in the layer.
/// \param point <code>CGPoint</code> point in layer (spritekit space).
///
///
/// returns:
/// <code>CGPoint</code> tile coordinate.
- (CGPoint)coordinateForPoint:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
/// Called when the layer is finished rendering.
/// \param duration <code>TimeInterval</code> fade-in duration.
///
- (void)didFinishRenderingWithDuration:(NSTimeInterval)duration;
/// Set up physics boundary for the entire layer.
/// \param isDynamic <code>Bool</code> layer is dynamic.
///
- (void)setupLayerPhysicsBoundaryWithIsDynamic:(BOOL)isDynamic;
/// Set up physics for child objects.
- (void)setupPhysics;
@property (nonatomic, readonly) NSInteger hashValue;
/// Visualize the layer’s boundary shape.
- (void)drawBounds;
- (void)debugLayer;
/// Toggle layer isolation on/off.
- (void)isolateLayerWithDuration:(NSTimeInterval)duration;
/// Update the layer before each frame is rendered.
/// \param currentTime <code>TimeInterval</code> update interval.
///
- (void)update:(NSTimeInterval)currentTime;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// <h2>Overview</h2>
/// Subclass of <code>SKTiledLayerObject</code>, the group layer is a container for managing groups of layers.
/// <h2>Usage</h2>
/// Query child layers:
/// \code
/// for child in group.layers {
///    child.opacity = 0.5
/// }
///
/// \endcodeAdd layers to the group with:
/// \code
/// groupLayer.addLayer(playerLayer)
///
/// \endcodeRemove with:
/// \code
/// groupLayer.removeLayer(playerLayer)
///
/// \endcode
SWIFT_CLASS("_TtC7SKTiled12SKGroupLayer")
@interface SKGroupLayer : SKTiledLayerObject
/// Returns the last index for all layers.
@property (nonatomic, readonly) NSInteger lastIndex;
/// Returns the last (highest) z-position in the map.
@property (nonatomic, readonly) CGFloat lastZPosition;
/// Returns a flattened array of child layers.
@property (nonatomic, readonly, copy) NSArray<SKTiledLayerObject *> * _Nonnull layers;
@property (nonatomic) CGFloat speed;
/// Initialize with a layer name, and parent <code>SKTilemap</code> node.
/// \param layerName <code>String</code> image layer name.
///
/// \param tilemap <code>SKTilemap</code> parent map.
///
- (nonnull instancetype)initWithLayerName:(NSString * _Nonnull)layerName tilemap:(SKTilemap * _Nonnull)tilemap OBJC_DESIGNATED_INITIALIZER;
/// Initialize with parent <code>SKTilemap</code> and layer attributes.
/// <em>Do not use this intializer directly</em>
/// \param tilemap <code>SKTilemap</code> parent map.
///
/// \param attributes <code>[String: String]</code> layer attributes.
///
- (nullable instancetype)initWithTilemap:(SKTilemap * _Nonnull)tilemap attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Returns all layers, sorted by index (first is lowest, last is highest).
///
/// returns:
/// <code>[SKTiledLayerObject]</code> array of layers.
- (NSArray<SKTiledLayerObject *> * _Nonnull)allLayers SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of layer names.
///
/// returns:
/// <code>[String]</code> layer names.
- (NSArray<NSString *> * _Nonnull)layerNames SWIFT_WARN_UNUSED_RESULT;
/// Remove a layer from the current layers set.
/// \param layer <code>SKTiledLayerObject</code> layer object.
///
///
/// returns:
/// <code>SKTiledLayerObject?</code> removed layer.
- (SKTiledLayerObject * _Nullable)removeLayer:(SKTiledLayerObject * _Nonnull)layer SWIFT_WARN_UNUSED_RESULT;
/// Update the group layer before each frame is rendered.
/// \param currentTime <code>TimeInterval</code> update interval.
///
- (void)update:(NSTimeInterval)currentTime;
- (nullable instancetype)initWithLayerName:(NSString * _Nonnull)layerName tilemap:(SKTilemap * _Nonnull)tilemap attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes SWIFT_UNAVAILABLE;
@end

@class SKTexture;

/// <h2>Overview</h2>
/// The <code>SKImageLayer</code> object is really nothing more than a sprite with positioning attributes.
/// <h2>Usage</h2>
/// Set the layer image with:
/// \code
/// imageLayer.setLayerImage("clouds-background")
///
/// \endcode
SWIFT_CLASS("_TtC7SKTiled12SKImageLayer")
@interface SKImageLayer : SKTiledLayerObject
@property (nonatomic, copy) NSString * _Null_unspecified image;
@property (nonatomic) BOOL wrapX;
@property (nonatomic) BOOL wrapY;
/// Initialize with a layer name, and parent <code>SKTilemap</code> node.
/// \param layerName <code>String</code> image layer name.
///
/// \param tilemap <code>SKTilemap</code> parent map.
///
- (nonnull instancetype)initWithLayerName:(NSString * _Nonnull)layerName tilemap:(SKTilemap * _Nonnull)tilemap OBJC_DESIGNATED_INITIALIZER;
/// Initialize with parent <code>SKTilemap</code> and layer attributes.
/// <em>Do not use this intializer directly</em>
/// \param tilemap <code>SKTilemap</code> parent map.
///
/// \param attributes <code>[String: String]</code> layer attributes.
///
- (nullable instancetype)initWithTilemap:(SKTilemap * _Nonnull)tilemap attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes OBJC_DESIGNATED_INITIALIZER;
/// Set the layer image as a sprite.
/// \param named <code>String</code> image name.
///
- (void)setLayerImage:(NSString * _Nonnull)named;
- (void)setLayerTextureWithTexture:(SKTexture * _Nonnull)texture;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Update the image layer before each frame is rendered.
/// \param currentTime <code>TimeInterval</code> update interval.
///
- (void)update:(NSTimeInterval)currentTime;
- (nullable instancetype)initWithLayerName:(NSString * _Nonnull)layerName tilemap:(SKTilemap * _Nonnull)tilemap attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes SWIFT_UNAVAILABLE;
@end


@interface SKImageLayer (SWIFT_EXTENSION(SKTiled))
/// Parse the image layer’s properties.
- (void)parsePropertiesWithCompletion:(void (^ _Nullable)(void))completion;
@end



@class SKTileObject;

/// <h2>Overview</h2>
/// The <code>SKObjectGroup</code> class is a container for vector object types. Most object properties can be set on the parent <code>SKObjectGroup</code> which is then applied to all child objects.
/// <h2>Usage</h2>
/// Adding a child object with optional color override:
/// \code
/// objectGroup.addObject(myObject, withColor: SKColor.red)
///
/// \endcodeQuerying an object with a specific name:
/// \code
/// let doorObject = objectGroup.getObject(named: "Door")
///
/// \endcodeGetting objects of a certain type:
/// \code
/// let rockObjects = objectGroup.getObjects(ofType: "Rock")
///
/// \endcode
SWIFT_CLASS("_TtC7SKTiled13SKObjectGroup")
@interface SKObjectGroup : SKTiledLayerObject
/// Toggle visibility for all of the objects in the layer.
@property (nonatomic) BOOL showObjects;
/// Returns the number of objects in this layer.
@property (nonatomic, readonly) NSInteger count;
/// Controls antialiasing for each object
@property (nonatomic) BOOL antialiased;
/// Governs object line width for each object.
@property (nonatomic) CGFloat lineWidth;
/// Render scaling property.
@property (nonatomic) CGFloat renderQuality;
@property (nonatomic) CGFloat speed;
/// Initialize with layer name and parent <code>SKTilemap</code>.
/// \param layerName <code>String</code> layer name.
///
/// \param tilemap <code>SKTilemap</code> parent map.
///
- (nonnull instancetype)initWithLayerName:(NSString * _Nonnull)layerName tilemap:(SKTilemap * _Nonnull)tilemap OBJC_DESIGNATED_INITIALIZER;
/// Initialize with parent <code>SKTilemap</code> and layer attributes.
/// <em>Do not use this intializer directly</em>
/// \param tilemap <code>SKTilemap</code> parent map.
///
/// \param attributes <code>[String: String]</code> layer attributes.
///
- (nullable instancetype)initWithTilemap:(SKTilemap * _Nonnull)tilemap attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Add an <code>SKTileObject</code> object to the objects set.
/// \param object <code>SKTileObject</code> object.
///
/// \param withColor <code>SKColor?</code> optional override color (otherwise defaults to parent layer color).
///
///
/// returns:
/// <code>SKTileObject?</code> added object.
- (SKTileObject * _Nullable)addObject:(SKTileObject * _Nonnull)object withColor:(NSColor * _Nullable)withColor SWIFT_WARN_UNUSED_RESULT;
/// Remove an <code>SKTileObject</code> object from the objects set.
/// \param object <code>SKTileObject</code> object.
///
///
/// returns:
/// <code>SKTileObject?</code> removed object.
- (SKTileObject * _Nullable)removeObject:(SKTileObject * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Render all of the objects in the group.
- (void)drawObjects;
/// Set the color for all objects.
/// \param color <code>SKColor</code> object color.
///
/// \param force <code>Bool</code> force color on objects that have an override.
///
- (void)setColorWithColor:(NSColor * _Nonnull)color;
/// Set the color for all objects.
/// \param color <code>SKColor</code> object color.
///
/// \param force <code>Bool</code> force color on objects that have an override.
///
- (void)setColorWithHexString:(NSString * _Nonnull)hexString;
/// Returns an array of object names.
///
/// returns:
/// <code>[String]</code> object names in the layer.
- (NSArray<NSString *> * _Nonnull)objectNames SWIFT_WARN_UNUSED_RESULT;
/// Returns an object with the given id.
/// \param id <code>Int</code> Object id.
///
///
/// returns:
/// <code>SKTileObject?</code>
- (SKTileObject * _Nullable)getObjectWithID:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Return text objects with matching text.
/// \param withText <code>String</code> text string to match.
///
///
/// returns:
/// <code>[SKTileObject]</code> array of matching objects.
- (NSArray<SKTileObject *> * _Nonnull)getObjectsWithText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// Return objects with the given name.
/// \param named <code>String</code> Object name.
///
///
/// returns:
/// <code>[SKTileObject]</code> array of matching objects.
- (NSArray<SKTileObject *> * _Nonnull)getObjectsWithNamed:(NSString * _Nonnull)named SWIFT_WARN_UNUSED_RESULT;
/// Return all child objects.
///
/// returns:
/// <code>[SKTileObject]</code> array of matching objects.
- (NSArray<SKTileObject *> * _Nonnull)getObjects SWIFT_WARN_UNUSED_RESULT;
/// Return objects of a given type.
/// \param type <code>String</code> object type.
///
///
/// returns:
/// <code>[SKTileObject]</code> array of matching objects.
- (NSArray<SKTileObject *> * _Nonnull)getObjectsOfType:(NSString * _Nonnull)ofType SWIFT_WARN_UNUSED_RESULT;
/// Return tile objects.
///
/// returns:
/// <code>[SKTileObject]</code> objects with a tile gid.
- (NSArray<SKTileObject *> * _Nonnull)tileObjects SWIFT_WARN_UNUSED_RESULT;
/// Return tile object(s) matching the given global id.
/// \param globalID <code>Int</code> global id to query.
///
///
/// returns:
/// <code>SKTileObject?</code> removed object.
- (NSArray<SKTileObject *> * _Nonnull)tileObjectsWithGlobalID:(NSInteger)globalID SWIFT_WARN_UNUSED_RESULT;
/// Return text objects.
///
/// returns:
/// <code>[SKTileObject]</code> text objects.
- (NSArray<SKTileObject *> * _Nonnull)textObjects SWIFT_WARN_UNUSED_RESULT;
/// Called when the layer is finished rendering.
/// \param duration <code>TimeInterval</code> fade-in duration.
///
- (void)didFinishRenderingWithDuration:(NSTimeInterval)duration;
/// Update the object group before each frame is rendered.
/// \param currentTime <code>TimeInterval</code> update interval.
///
- (void)update:(NSTimeInterval)currentTime;
- (nullable instancetype)initWithLayerName:(NSString * _Nonnull)layerName tilemap:(SKTilemap * _Nonnull)tilemap attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes SWIFT_UNAVAILABLE;
@end


@interface SKObjectGroup (SWIFT_EXTENSION(SKTiled))
/// Parse the object group’s properties.
- (void)parsePropertiesWithCompletion:(void (^ _Nullable)(void))completion;
@end


@interface SKObjectGroup (SWIFT_EXTENSION(SKTiled))
/// Returns an object with the given name.
/// \param named <code>String</code> Object name.
///
///
/// returns:
/// <code>SKTileObject?</code>
- (SKTileObject * _Nullable)getObjectWithNamed:(NSString * _Nonnull)named SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("use `getObjects(named:,recursive:)` instead");
@end


@interface SKScene (SWIFT_EXTENSION(SKTiled))
/// Returns the center point of a scene.
@property (nonatomic, readonly) CGPoint center;
/// Calculate the distance from the scene’s origin
- (CGVector)distanceFromOrigin:(CGPoint)pos SWIFT_WARN_UNUSED_RESULT;
/// Returns a tilemap file name.
@property (nonatomic, readonly, copy) NSString * _Nullable tmxFilename;
@end



@class SKTileLayer;

/// <h2>Overview</h2>
/// The <code>SKTile</code> class is a custom SpriteKit sprite that references data from a tileset.
/// Tile data (including texture) is stored in <code>SKTilesetData</code> property.
SWIFT_CLASS("_TtC7SKTiled6SKTile")
@interface SKTile : SKSpriteNode
/// Tile size.
@property (nonatomic) CGSize tileSize;
/// Weak reference to the parent layer.
@property (nonatomic, weak) SKTileLayer * _Null_unspecified layer;
/// Tile highlight color.
@property (nonatomic, strong) NSColor * _Nonnull highlightColor;
/// Tile bounds color.
@property (nonatomic, strong) NSColor * _Nonnull frameColor;
/// Tile highlight duration.
@property (nonatomic) NSTimeInterval highlightDuration;
/// Returns the bounding box of the shape.
@property (nonatomic, readonly) CGRect bounds;
/// Initialize the tile with a tile size.
/// \param tileSize <code>CGSize</code> tile size in pixels.
///
///
/// returns:
/// <code>SKTile</code> tile sprite.
- (nonnull instancetype)initWithTileSize:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Initialize an empty tile.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initialize the tile texture.
/// \param texture <code>SKTexture?</code> tile texture.
///
///
/// returns:
/// <code>SKTile</code> tile sprite.
- (nonnull instancetype)initWithTexture:(SKTexture * _Nullable)texture OBJC_DESIGNATED_INITIALIZER;
/// Set up the tile’s dynamics body with a rectanglular shape.
/// \param rectSize <code>CGSize</code> rectangle size.
///
/// \param isDynamic <code>Bool</code> physics body is active.
///
- (void)setupPhysicsWithRectSize:(CGSize)rectSize isDynamic:(BOOL)isDynamic;
/// Set up the tile’s dynamics body with a rectanglular shape.
/// \param withSize <code>CGFloat</code> rectangle size.
///
/// \param isDynamic <code>Bool</code> physics body is active.
///
- (void)setupPhysicsWithSize:(CGFloat)withSize isDynamic:(BOOL)isDynamic;
/// Set up the tile’s dynamics body with a circular shape.
/// \param radius <code>CGFloat</code> circle radius.
///
/// \param isDynamic <code>Bool</code> physics body is active.
///
- (void)setupPhysicsWithRadius:(CGFloat)radius isDynamic:(BOOL)isDynamic;
/// Remove tile physics body.
/// \param withSize <code>CGFloat</code> dynamics body size.
///
- (void)removePhysics;
/// Run tile animation.
- (void)runAnimation;
/// Remove tile animation.
/// \param restore <code>Bool</code> restore the initial texture.
///
- (void)removeAnimationWithRestore:(BOOL)restore;
/// Set the tile overlap amount.
/// \param overlap <code>CGFloat</code> tile overlap.
///
- (void)setTileOverlap:(CGFloat)overlap;
/// Returns the points of the tile’s shape.
///
/// returns:
/// <code>[CGPoint]?</code> array of points.
- (NSArray<NSValue *> * _Nonnull)getVerticesWithOffset:(CGPoint)offset SWIFT_WARN_UNUSED_RESULT;
/// Render the tile before each frame is rendered.
/// \param deltaTime <code>TimeInterval</code> update interval.
///
- (void)update:(NSTimeInterval)deltaTime;
- (nonnull instancetype)initWithTexture:(SKTexture * _Nullable)texture color:(NSColor * _Nonnull)color size:(CGSize)size SWIFT_UNAVAILABLE;
@end


@interface SKTile (SWIFT_EXTENSION(SKTiled))
@property (nonatomic, readonly) CGPoint tileOffset;
@end


@interface SKTile (SWIFT_EXTENSION(SKTiled))
/// Pauses tile animation
@property (nonatomic) BOOL pauseAnimation;
@end


@interface SKTile (SWIFT_EXTENSION(SKTiled))
/// Opacity value of the tile.
@property (nonatomic) CGFloat opacity;
/// Visibility value of the tile.
@property (nonatomic) BOOL visible;
/// Show/hide the tile’s bounding shape.
@property (nonatomic) BOOL showBounds;
/// Tile description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Tile debug description.
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull shortDescription;
@end

@class SKUniform;

/// <h2>Overview</h2>
/// Subclass of <code>SKTiledLayerObject</code>, the tile layer is a container for an array of tiles (sprites). Tiles maintain a link to the map’s tileset via their <code>SKTilesetData</code> property.
/// <h2>Usage</h2>
/// Accessing a tile at a given coordinate:
/// \code
/// let tile = tileLayer.tileAt(2, 6)!
///
/// \endcodeGetting tiles of a certain type:
/// \code
/// let floorTiles = tileLayer.getTiles(ofType: "Floor")
///
/// \endcode
SWIFT_CLASS("_TtC7SKTiled11SKTileLayer")
@interface SKTileLayer : SKTiledLayerObject
/// Returns a count of valid tiles.
@property (nonatomic, readonly) NSInteger tileCount;
/// Tile highlight duration
@property (nonatomic) NSTimeInterval highlightDuration;
@property (nonatomic) CGFloat speed;
/// Initialize with layer name and parent <code>SKTilemap</code>.
/// \param layerName <code>String</code> layer name.
///
/// \param tilemap <code>SKTilemap</code> parent map.
///
- (nonnull instancetype)initWithLayerName:(NSString * _Nonnull)layerName tilemap:(SKTilemap * _Nonnull)tilemap OBJC_DESIGNATED_INITIALIZER;
/// Initialize with parent <code>SKTilemap</code> and layer attributes.
/// <em>Do not use this intializer directly</em>
/// \param tilemap <code>SKTilemap</code> parent map.
///
/// \param attributes <code>[String: String]</code> layer attributes.
///
- (nullable instancetype)initWithTilemap:(SKTilemap * _Nonnull)tilemap attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Returns a tile at the given coordinate, if one exists.
/// \param x <code>Int</code> y-coordinate.
///
/// \param y <code>Int</code> x-coordinate.
///
///
/// returns:
/// <code>SKTile?</code> tile object, if it exists.
- (SKTile * _Nullable)tileAt:(NSInteger)x :(NSInteger)y SWIFT_WARN_UNUSED_RESULT;
/// Returns a tile at the given coordinate, if one exists.
/// \param coord <code>CGPoint</code> tile coordinate.
///
///
/// returns:
/// <code>SKTile?</code> tile object, if it exists.
- (SKTile * _Nullable)tileAtCoord:(CGPoint)coord SWIFT_WARN_UNUSED_RESULT;
/// Returns all current tiles.
///
/// returns:
/// <code>[SKTile]</code> array of tiles.
- (NSArray<SKTile *> * _Nonnull)getTiles SWIFT_WARN_UNUSED_RESULT;
/// Returns tiles with a property of the given type.
/// \param ofType <code>String</code> type.
///
///
/// returns:
/// <code>[SKTile]</code> array of tiles.
- (NSArray<SKTile *> * _Nonnull)getTilesOfType:(NSString * _Nonnull)ofType SWIFT_WARN_UNUSED_RESULT;
/// Returns tiles matching the given global id.
/// \param globalID <code>Int</code> tile global id.
///
///
/// returns:
/// <code>[SKTile]</code> array of tiles.
- (NSArray<SKTile *> * _Nonnull)getTilesWithGlobalID:(NSInteger)globalID SWIFT_WARN_UNUSED_RESULT;
/// Returns tiles with a property of the given type.
/// \param type <code>String</code> type.
///
///
/// returns:
/// <code>[SKTile]</code> array of tiles.
- (NSArray<SKTile *> * _Nonnull)getTilesWithProperty:(NSString * _Nonnull)named :(id _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Returns all tiles with animation.
///
/// returns:
/// <code>[SKTile]</code> array of animated tiles.
- (NSArray<SKTile *> * _Nonnull)animatedTiles SWIFT_WARN_UNUSED_RESULT;
/// Add tile data array to the layer and render it.
/// \param data <code>[Int]</code> tile data.
///
///
/// returns:
/// <code>Bool</code> data was successfully added.
- (BOOL)setLayerData:(NSArray<NSNumber *> * _Nonnull)data debug:(BOOL)debug SWIFT_WARN_UNUSED_RESULT;
/// Build an empty tile at the given coordinates with a custom texture. Returns nil is the coordinate
/// is invalid.
/// \param coord <code>CGPoint</code> tile coordinate.
///
/// \param texture <code>SKTexture?</code> optional tile texture.
///
///
/// returns:
/// <code>SKTile?</code> tile.
- (SKTile * _Nullable)addTileAtCoord:(CGPoint)coord texture:(SKTexture * _Nullable)texture tileType:(NSString * _Nullable)tileType SWIFT_WARN_UNUSED_RESULT;
/// Build an empty tile at the given coordinates with a custom texture. Returns nil is the coordinate
/// is invalid.
/// \param x <code>Int</code> x-coordinate
///
/// \param y <code>Int</code> y-coordinate
///
/// \param texture <code>SKTexture?</code> optional tile texture.
///
///
/// returns:
/// <code>SKTile?</code> tile.
- (SKTile * _Nullable)addTileAt:(NSInteger)x :(NSInteger)y texture:(SKTexture * _Nullable)texture SWIFT_WARN_UNUSED_RESULT;
/// Remove the tile at a given x/y coordinates.
/// \param x <code>Int</code> x-coordinate
///
/// \param y <code>Int</code> y-coordinate
///
///
/// returns:
/// <code>SKTile?</code> removed tile.
- (SKTile * _Nullable)removeTileAt:(NSInteger)x :(NSInteger)y SWIFT_WARN_UNUSED_RESULT;
/// Remove the tile at a given coordinate.
/// \param coord <code>CGPoint</code> tile coordinate.
///
///
/// returns:
/// <code>SKTile?</code> removed tile.
- (SKTile * _Nullable)removeTileAtCoord:(CGPoint)coord SWIFT_WARN_UNUSED_RESULT;
/// Set a tile at the given coordinate.
/// \param x <code>Int</code> x-coordinate
///
/// \param y <code>Int</code> y-coordinate
///
///
/// returns:
/// <code>SKTile?</code> tile.
- (SKTile * _Nullable)setTile:(NSInteger)x :(NSInteger)y tile:(SKTile * _Nullable)tile SWIFT_WARN_UNUSED_RESULT;
/// Set a tile at the given coordinate.
/// \param coord <code>CGPoint</code> tile coordinate.
///
///
/// returns:
/// <code>SKTile?</code> tile.
- (SKTile * _Nullable)setTileAt:(CGPoint)coord tile:(SKTile * _Nullable)tile SWIFT_WARN_UNUSED_RESULT;
/// Set the tile overlap. Only accepts a value between 0 - 1.0
/// \param overlap <code>CGFloat</code> tile overlap value.
///
- (void)setTileOverlap:(CGFloat)overlap;
/// Called when the layer is finished rendering.
/// \param duration <code>TimeInterval</code> fade-in duration.
///
- (void)didFinishRenderingWithDuration:(NSTimeInterval)duration;
/// Set a shader for the tile layer.
/// \param named <code>String</code> shader file name.
///
/// \param uniforms <code>[SKUniform]</code> array of shader uniforms.
///
- (void)setShaderWithNamed:(NSString * _Nonnull)named uniforms:(NSArray<SKUniform *> * _Nonnull)uniforms;
/// Visualize the layer’s boundary shape.
- (void)drawBounds;
- (void)debugLayer;
/// Update the tile layer before each frame is rendered.
/// \param currentTime <code>TimeInterval</code> update interval.
///
- (void)update:(NSTimeInterval)currentTime;
- (nullable instancetype)initWithLayerName:(NSString * _Nonnull)layerName tilemap:(SKTilemap * _Nonnull)tilemap attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes SWIFT_UNAVAILABLE;
@end


@interface SKTileLayer (SWIFT_EXTENSION(SKTiled))
/// Parse the tile layer’s properties.
- (void)parsePropertiesWithCompletion:(void (^ _Nullable)(void))completion;
@end


@interface SKTileLayer (SWIFT_EXTENSION(SKTiled))
- (void)flatten;
@end


@interface SKTileLayer (SWIFT_EXTENSION(SKTiled))
/// Returns an array of valid tiles.
///
/// returns:
/// <code>[SKTile]</code> array of current tiles.
- (NSArray<SKTile *> * _Nonnull)validTiles SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("use `getTiles()` instead");
@end


@interface SKTileLayer (SWIFT_EXTENSION(SKTiled))
/// Initialize this layer’s grid graph with an array of walkable tiles.
/// \param walkable <code>[SKTile]</code> array of walkable tiles.
///
/// \param obstacles <code>[SKTile]</code> array of obstacle tiles.
///
/// \param diagonalsAllowed <code>Bool</code> allow diagonal movement in the grid.
///
/// \param withName <code>String?</code> optional graph name for identifying in scene.
///
/// \param nodeClass <code>String?</code> graph node type.
///
///
/// returns:
/// <code>GKGridGraph<GKGridGraphNode>?</code> navigation graph, if created.
- (GKGridGraph<GKGridGraphNode *> * _Nullable)initializeGraphWithWalkable:(NSArray<SKTile *> * _Nonnull)walkable obstacles:(NSArray<SKTile *> * _Nonnull)obstacles diagonalsAllowed:(BOOL)diagonalsAllowed withName:(NSString * _Nullable)withName nodeClass:(NSString * _Nullable)nodeClass SWIFT_WARN_UNUSED_RESULT;
/// Initialize layer navigation graph by not specifying tiles to utilize.
///
/// returns:
/// <code>GKGridGraph<GKGridGraphNode>?</code> navigation graph, if created.
- (GKGridGraph<GKGridGraphNode *> * _Nullable)initializeGraph SWIFT_WARN_UNUSED_RESULT;
/// Initialize this layer’s grid graph with an array of walkable & obstacle tile ids.
/// \param walkableIDs <code>[Int]</code> array of walkable tile ids.
///
/// \param obstacleIDs <code>[Int]</code> array of obstacle tile ids.
///
/// \param diagonalsAllowed <code>Bool</code> allow diagonal movement in the grid.
///
/// \param nodeClass <code>String?</code> graph node type.
///
///
/// returns:
/// <code>GKGridGraph<GKGridGraphNode>?</code> navigation graph, if created.
- (GKGridGraph<GKGridGraphNode *> * _Nullable)initializeGraphWithWalkableIDs:(NSArray<NSNumber *> * _Nonnull)walkableIDs obstacleIDs:(NSArray<NSNumber *> * _Nonnull)obstacleIDs diagonalsAllowed:(BOOL)diagonalsAllowed nodeClass:(NSString * _Nullable)nodeClass SWIFT_WARN_UNUSED_RESULT;
/// Return tiles with walkable data attributes.
///
/// returns:
/// <code>[SKTile]</code> array of tiles with walkable attribute.
- (NSArray<SKTile *> * _Nonnull)gatherWalkable SWIFT_WARN_UNUSED_RESULT;
/// Return tiles with obstacle data attributes.
///
/// returns:
/// <code>[SKTile]</code> array of tiles with obstacle attribute.
- (NSArray<SKTile *> * _Nonnull)gatherObstacles SWIFT_WARN_UNUSED_RESULT;
@end


/// <h2>Overview</h2>
/// The <code>SKTileObject</code> class represents a Tiled vector object type (rectangle, ellipse, polygon & polyline). When the object is created, points can be added either with an array of <code>CGPoint</code> objects, or a string. In order to render the object, the <code>SKTileObject.getVertices()</code> method is called, which returns the points needed to draw the path.
SWIFT_CLASS("_TtC7SKTiled12SKTileObject")
@interface SKTileObject : SKShapeNode
/// Object parent layer.
@property (nonatomic, weak) SKObjectGroup * _Null_unspecified layer;
/// Unique id (layer & object names may not be unique).
@property (nonatomic, copy) NSString * _Nonnull uuid;
/// Tiled object id.
@property (nonatomic) NSInteger id;
/// Object type.
@property (nonatomic, copy) NSString * _Null_unspecified type;
/// Object size.
@property (nonatomic) CGSize size;
/// Object bounds color.
@property (nonatomic, strong) NSColor * _Nonnull frameColor;
/// Custom object properties.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
@property (nonatomic) BOOL ignoreProperties;
/// Text object render quality.
@property (nonatomic) CGFloat renderQuality;
/// Text string (for text objects). Setting this attribute will redraw the object automatically.
@property (nonatomic, copy) NSString * _Null_unspecified text;
/// Returns the bounding box of the shape.
@property (nonatomic, readonly) CGRect bounds;
/// Returns the object anchor point (based on the current map’s tile size).
@property (nonatomic, readonly) CGPoint anchorPoint;
/// Signifies that this object is a text or tile object.
@property (nonatomic, readonly) BOOL isRenderableType;
/// Signifies that this object is a polygonal type.
@property (nonatomic, readonly) BOOL isPolyType;
@property (nonatomic) CGFloat speed;
/// Initialize the object attributes dictionary.
/// \param attributes <code>[String: String]</code> object attributes.
///
- (nullable instancetype)initWithAttributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes OBJC_DESIGNATED_INITIALIZER;
/// Initialize the object with an object group reference.
/// \param layer <code>SKObjectGroup</code> object group.
///
- (nonnull instancetype)initWithLayer:(SKObjectGroup * _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Set the fill & stroke colors (with optional alpha component for the fill)
/// \param color <code>SKColor</code> fill & stroke color.
///
/// \param alpha <code>CGFloat</code> alpha component for fill.
///
- (void)setColorWithColor:(NSColor * _Nonnull)color withAlpha:(CGFloat)alpha redraw:(BOOL)redraw;
/// Set the fill & stroke colors with a hexadecimal string.
/// \param color <code>hexString</code> hex color string.
///
/// \param alpha <code>CGFloat</code> alpha component for fill.
///
- (void)setColorWithHexString:(NSString * _Nonnull)hexString withAlpha:(CGFloat)alpha redraw:(BOOL)redraw;
/// Render the object.
- (void)drawObjectWithDebug:(BOOL)debug;
/// Draw the text object. Scale factor is to allow for text to render clearly at higher zoom levels.
/// \param withScale <code>CGFloat</code> size scale.
///
///
/// returns:
/// <code>CGImage</code> rendered text image.
- (CGImageRef _Nullable)drawTextObjectWithScale:(CGFloat)withScale SWIFT_WARN_UNUSED_RESULT;
/// Returns the internal <code>SKTileObject.points</code> array, translated into the current map’s projection.
///
/// returns:
/// <code>[CGPoint]?</code> array of points.
- (NSArray<NSValue *> * _Nullable)getVertices SWIFT_WARN_UNUSED_RESULT;
/// Show/hide the object’s boundary shape.
@property (nonatomic) BOOL showBounds;
- (void)didBeginRenderingWithCompletion:(void (^ _Nullable)(void))completion;
- (void)didFinishRenderingWithCompletion:(void (^ _Nullable)(void))completion;
/// Setup physics for the object based on properties set up in Tiled.
- (void)setupPhysics;
/// Update the object before each frame is rendered.
/// \param currentTime <code>TimeInterval</code> update interval.
///
- (void)update:(NSTimeInterval)deltaTime;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface SKTileObject (SWIFT_EXTENSION(SKTiled))
/// Runs tile animation.
- (void)runAnimation SWIFT_DEPRECATED;
@end


@interface SKTileObject (SWIFT_EXTENSION(SKTiled))
/// Parse the object’s properties value.
- (void)parsePropertiesWithCompletion:(void (^ _Nullable)(void))completion;
@end


@interface SKTileObject (SWIFT_EXTENSION(SKTiled))
@property (nonatomic, readonly) NSInteger hashValue;
/// Tile data description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull shortDescription;
@end


@interface SKTileObject (SWIFT_EXTENSION(SKTiled))
/// Object opacity
@property (nonatomic) CGFloat opacity;
/// Object visibility
@property (nonatomic) BOOL visible;
/// Returns true if the object references an animated tile.
@property (nonatomic, readonly) BOOL isAnimated;
/// Signifies that the object is a text object.
@property (nonatomic, readonly) BOOL isTextObject;
/// Signifies that the object is a tile object.
@property (nonatomic, readonly) BOOL isTileObject;
@end

@class GKGraphNode;

/// <h2>Overview</h2>
/// Custom <a href="https://developer.apple.com/documentation/gameplaykit/gkgridgraphnode"><code>GKGridGraphNode</code></a> object that adds a weight parameter for
/// use with Tiled scene properties. Can be used with normal <a href="https://developer.apple.com/documentation/gameplaykit/gkgridgraphnode"><code>GKGridGraphNode</code></a>
/// instances. The <code>SKTiledGraphNode.weight</code> property is used to affect the estimated cost to a
/// connected node. (Increasing the weight makes it less likely to be travelled to, decreasing more likely).
/// <h2>Usage</h2>
/// \code
/// // query a node in the graph and increase the weight property
/// if let node = graph.node(atGridPosition: coord) as? SKTiledGraphNode {
///    node.weight = 25.0
/// }
///
/// \endcode
SWIFT_CLASS("_TtC7SKTiled16SKTiledGraphNode")
@interface SKTiledGraphNode : GKGridGraphNode
/// Weight property.
@property (nonatomic) float weight;
/// Initialize the node with a weight parameter.
/// \param gridPosition <code>int2</code> vector int2 coordinates.
///
/// \param weight <code>Float</code> node weight.
///
///
/// returns:
/// <code>SKTiledGraphNode</code> node instance.
- (nonnull instancetype)initWithGridPosition:(swift_int2)gridPosition weight:(float)weight OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithGridPosition:(swift_int2)gridPosition OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// The <code>GKGridGraphNode.cost</code> method is used in the <code>GKGridGraphNode.findPathToNode</code> method.
/// Returns the cost (lower is better) for each node in the possible nodes.
/// \param node <code>GKGraphNode</code> node to estimate from.
///
///
/// returns:
/// <code>Float</code> cost to travel to the given node.
- (float)costToNode:(GKGraphNode * _Nonnull)node SWIFT_WARN_UNUSED_RESULT;
/// Returns the heuristic cost to node.
/// \param node <code>GKGraphNode</code> target graph node.
///
///
/// returns:
/// <code>Float</code> heuristic cost to node.
- (float)estimatedCostToNode:(GKGraphNode * _Nonnull)node SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



@interface SKTiledLayerObject (SWIFT_EXTENSION(SKTiled))
/// Parse the layer’s properties value.
- (void)parsePropertiesWithCompletion:(void (^ _Nullable)(void))completion;
/// Returns a named property for the layer.
/// \param name <code>String</code> property name.
///
///
/// returns:
/// <code>String?</code> the property value, or nil if it does not exist.
- (NSString * _Nullable)getValueForProperty:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Set a property/value pair.
/// \param name <code>String</code> property name.
///
/// \param value <code>String</code> property value.
///
- (void)setValue:(NSString * _Nonnull)value forProperty:(NSString * _Nonnull)name;
@end


@interface SKTiledLayerObject (SWIFT_EXTENSION(SKTiled))
/// Return a string representing the layer name.
@property (nonatomic, readonly, copy) NSString * _Nonnull layerName;
/// Returns an array of parent layers, beginning with the current.
@property (nonatomic, readonly, copy) NSArray<SKNode *> * _Nonnull parents;
/// Returns an array of child layers.
@property (nonatomic, readonly, copy) NSArray<SKNode *> * _Nonnull childLayers;
/// Returns an array of tiles/objects.
///
/// returns:
/// <code>[SKNode]</code> array of child objects.
- (NSArray<SKNode *> * _Nonnull)renderableObjects SWIFT_WARN_UNUSED_RESULT;
/// Indicates the layer is a top-level layer.
@property (nonatomic, readonly) BOOL isTopLevel;
/// Translate the parent hierarchy to a path string
@property (nonatomic, readonly, copy) NSString * _Nonnull path;
/// Returns a string array representing the current layer name & index.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull layerStatsDescription;
@end


@interface SKTiledLayerObject (SWIFT_EXTENSION(SKTiled))
/// Layer transparency.
@property (nonatomic) CGFloat opacity;
/// Layer visibility.
@property (nonatomic) BOOL visible;
/// Returns a point for a given coordinate in the layer, with optional offset values for x/y.
/// \param x <code>Int</code> x-coordinate.
///
/// \param y <code>Int</code> y-coordinate.
///
/// \param offsetX <code>CGFloat</code> x-offset value.
///
/// \param offsetY <code>CGFloat</code> y-offset value.
///
///
/// returns:
/// <code>CGPoint</code> position in layer.
- (CGPoint)pointForCoordinate:(NSInteger)x :(NSInteger)y offsetX:(CGFloat)offsetX offsetY:(CGFloat)offsetY SWIFT_WARN_UNUSED_RESULT;
/// Returns a point for a given coordinate in the layer, with optional offset.
/// \param coord <code>CGPoint</code> tile coordinate.
///
/// \param offset <code>CGPoint</code> tile offset.
///
///
/// returns:
/// <code>CGPoint</code> point in layer.
- (CGPoint)pointForCoordinateWithCoord:(CGPoint)coord offset:(CGPoint)offset SWIFT_WARN_UNUSED_RESULT;
/// Returns a tile coordinate for a given vector_int2 coordinate.
/// \param vec2 <code>int2</code> vector int2 coordinate.
///
/// \param offsetX <code>CGFloat</code> x-offset value.
///
/// \param offsetY <code>CGFloat</code> y-offset value.
///
///
/// returns:
/// <code>CGPoint</code> position in layer.
- (CGPoint)pointForCoordinateWithVec2:(swift_int2)vec2 offsetX:(CGFloat)offsetX offsetY:(CGFloat)offsetY SWIFT_WARN_UNUSED_RESULT;
/// Returns a tile coordinate for a given point in the layer.
/// \param x <code>Int</code> x-position.
///
/// \param y <code>Int</code> y-position.
///
///
/// returns:
/// <code>CGPoint</code> position in layer.
- (CGPoint)coordinateForPoint:(NSInteger)x :(NSInteger)y SWIFT_WARN_UNUSED_RESULT;
/// Returns the center point of a layer.
@property (nonatomic, readonly) CGPoint center;
/// Calculate the distance from the layer’s origin
- (CGVector)distanceFromOrigin:(CGPoint)pos SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

@class SKTiledSceneCamera;
@class SKView;

/// <h2>Overview</h2>
/// Custom scene type for managing <code>SKTilemap</code> nodes.
/// Conforms to the <code>SKTiledSceneDelegate</code> & <code>SKTilemapDelegate</code> protocols.
/// <h3>Properties:</h3>
/// \code
/// SKTiledScene.worldNode:    `SKNode!` root container node.
/// SKTiledScene.tilemap:      `SKTilemap!` tile map object.
/// SKTiledScene.cameraNode:   `SKTiledSceneCamera!` custom scene camera.
///
/// \endcode
SWIFT_CLASS("_TtC7SKTiled12SKTiledScene")
@interface SKTiledScene : SKScene <SKPhysicsContactDelegate>
/// Root container node.
@property (nonatomic, strong) SKNode * _Null_unspecified worldNode;
/// Tile map node.
@property (nonatomic, strong) SKTilemap * _Null_unspecified tilemap;
/// Custom scene camera.
@property (nonatomic, strong) SKTiledSceneCamera * _Null_unspecified cameraNode;
/// Reference to navigation graphs.
@property (nonatomic, copy) NSDictionary<NSString *, GKGridGraph<GKGridGraphNode *> *> * _Nonnull graphs;
/// Set the tilemap speed
@property (nonatomic) CGFloat speed;
/// Initialize without a tiled map.
/// \param size <code>CGSize</code> scene size.
///
///
/// returns:
/// <code>SKTiledScene</code> scene.
- (nonnull instancetype)initWithSize:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)didChangeSize:(CGSize)oldSize;
- (void)didMoveToView:(SKView * _Nonnull)view;
- (void)didBeginParsing:(SKTilemap * _Nonnull)tilemap;
- (void)didAddLayer:(SKTiledLayerObject * _Nonnull)layer;
- (void)didReadMap:(SKTilemap * _Nonnull)tilemap;
- (void)didRenderMap:(SKTilemap * _Nonnull)tilemap;
- (void)didAddNavigationGraph:(GKGridGraph<GKGridGraphNode *> * _Nonnull)graph;
- (SWIFT_METATYPE(SKTile) _Nonnull)objectForTileTypeWithNamed:(NSString * _Nullable)named SWIFT_WARN_UNUSED_RESULT;
- (SWIFT_METATYPE(SKTileObject) _Nonnull)objectForVectorTypeWithNamed:(NSString * _Nullable)named SWIFT_WARN_UNUSED_RESULT;
/// Called before each frame is rendered.
/// \param currentTime <code>TimeInterval</code> update interval.
///
- (void)update:(NSTimeInterval)currentTime;
/// Update the camera bounds.
- (void)updateCamera;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface SKTiledScene (SWIFT_EXTENSION(SKTiled))
/// Return a custom graph node type.
/// \param named <code>String</code> graph node type.
///
///
/// returns:
/// <code>GKGridGraphNode.Type</code> dictionary insertion was successfull.
- (SWIFT_METATYPE(GKGridGraphNode) _Nonnull)objectForGraphTypeWithNamed:(NSString * _Nullable)named SWIFT_WARN_UNUSED_RESULT;
/// Add a <code>GKGridGraph</code> instance to the <code>SKTIledScene.graphs</code> property. Returns false if that
/// name exists already.
/// \param named <code>String</code> name of graph.
///
/// \param graph <code>GKGridGraph<GKGridGraphNode></code>
///
///
/// returns:
/// <code>Bool</code> dictionary insertion was successfull.
- (BOOL)addGraphWithNamed:(NSString * _Nonnull)named graph:(GKGridGraph<GKGridGraphNode *> * _Nonnull)graph SWIFT_WARN_UNUSED_RESULT;
/// Remove a named <code>GKGridGraph</code> from the <code>SKTIledScene.graphs</code> property.
/// \param named <code>String</code> name of graph.
///
///
/// returns:
/// <code>GKGridGraph?</code> removed graph instance.
- (GKGridGraph<GKGridGraphNode *> * _Nullable)removeGraphWithNamed:(NSString * _Nonnull)named SWIFT_WARN_UNUSED_RESULT;
@end


@interface SKTiledScene (SWIFT_EXTENSION(SKTiled))
- (void)mouseDown:(NSEvent * _Nonnull)event;
- (void)mouseMoved:(NSEvent * _Nonnull)event;
- (void)mouseUp:(NSEvent * _Nonnull)event;
- (void)mouseEntered:(NSEvent * _Nonnull)event;
- (void)mouseExited:(NSEvent * _Nonnull)event;
- (void)scrollWheel:(NSEvent * _Nonnull)event;
@end


@interface SKTiledScene (SWIFT_EXTENSION(SKTiled))
/// Called when the camera positon changes.
/// \param newPositon <code>CGPoint</code> updated camera position.
///
- (void)cameraPositionChangedWithNewPosition:(CGPoint)newPosition;
/// Called when the camera zoom changes.
/// \param newZoom <code>CGFloat</code> camera zoom amount.
///
- (void)cameraZoomChangedWithNewZoom:(CGFloat)newZoom;
/// Called when the camera bounds updated.
/// \param bounds <code>CGRect</code> camera view bounds.
///
/// \param positon <code>CGPoint</code> camera position.
///
/// \param zoom <code>CGFloat</code> camera zoom amount.
///
- (void)cameraBoundsChangedWithBounds:(CGRect)bounds position:(CGPoint)position zoom:(CGFloat)zoom;
/// Called when the scene is double-clicked. (macOS only)
/// \param event <code>NSEvent</code> mouse click event.
///
- (void)sceneDoubleClickedWithEvent:(NSEvent * _Nonnull)event;
/// Called when the mouse moves in the scene. (macOS only)
/// \param event <code>NSEvent</code> mouse event.
///
- (void)mousePositionChangedWithEvent:(NSEvent * _Nonnull)event;
@end


/// <h2>Overview</h2>
/// Custom scene camera that responds to finger gestures and mouse events.
/// The <code>SKTiledSceneCamera</code> is a custom camera meant to be used with a scene conforming to the <code>SKTiledSceneDelegate</code> protocol.
/// The camera defines a position in the scene to render the scene from, with a reference to the <code>SKTiledSceneDelegate.worldNode</code>
/// to interact with tile maps.
SWIFT_CLASS("_TtC7SKTiled18SKTiledSceneCamera")
@interface SKTiledSceneCamera : SKCameraNode
@property (nonatomic) CGFloat zoom;
@property (nonatomic) CGFloat initialZoom;
@property (nonatomic) BOOL allowMovement;
@property (nonatomic) BOOL allowZoom;
@property (nonatomic) BOOL allowRotation;
@property (nonatomic) BOOL allowPause;
@property (nonatomic) CGFloat minZoom;
@property (nonatomic) CGFloat maxZoom;
@property (nonatomic, readonly) BOOL isAtMaxZoom;
@property (nonatomic) BOOL showOverlay;
/// Initialize the camera with SKView and world node reference.
/// \param view <code>SKView?</code> optional view.
///
/// \param world <code>SKNode</code> world container node.
///
- (nonnull instancetype)initWithView:(SKView * _Nonnull)view world:(SKNode * _Nonnull)node OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Add an overlay node.
- (void)addToOverlay:(SKNode * _Nonnull)node;
/// Apply zooming to the world node (as scale).
/// \param scale <code>CGFloat</code> zoom amount.
///
- (void)setCameraZoom:(CGFloat)scale interval:(NSTimeInterval)interval;
/// Apply zooming to the camera based on location.
/// \param scale <code>CGFloat</code> zoom amount.
///
/// \param location <code>CGPoint</code> zoom location.
///
- (void)setCameraZoomAtLocationWithScale:(CGFloat)scale location:(CGPoint)location;
/// Set the camera min/max zoom values.
/// \param minimum <code>CGFloat</code> minimum zoom vector.
///
/// \param maximum <code>CGFloat</code> maximum zoom vector.
///
- (void)setZoomConstraintsWithMinimum:(CGFloat)minimum maximum:(CGFloat)maximum;
/// Update the camera bounds.
/// \param bounds <code>CGRect</code> camera view bounds.
///
- (void)setCameraBoundsWithBounds:(CGRect)bounds;
/// Move the camera to the given location.
/// \param location <code>CGPoint</code> new location.
///
/// \param previous <code>CGPoint</code> old location.
///
- (void)moveCameraWithLocation:(CGPoint)location previous:(CGPoint)previous;
/// Move camera manually.
/// \param point <code>CGPoint</code> point to move to.
///
/// \param duration <code>TimeInterval</code> duration of move.
///
- (void)panToPoint:(CGPoint)point duration:(NSTimeInterval)duration;
/// Center the camera on a location in the scene.
/// \param scenePoint <code>CGPoint</code> point in scene.
///
/// \param easeInOut <code>TimeInterval</code> ease in/out speed.
///
- (void)centerOnScenePoint:(CGPoint)point duration:(NSTimeInterval)duration;
/// Center the camera on a node in the scene.
/// \param scenePoint <code>SKNode</code> node in scene.
///
/// \param easeInOut <code>TimeInterval</code> ease in/out speed.
///
- (void)centerOn:(SKNode * _Nonnull)node duration:(NSTimeInterval)duration;
/// Reset the camera position & zoom level.
- (void)resetCamera;
/// Reset the camera position & zoom level.
/// \param toScale <code>CGFloat</code> camera scale.
///
- (void)resetCameraToScale:(CGFloat)scale;
/// Center & fit the current tilemap in the frame when the parent scene is resized.
/// \param newSize <code>CGSize</code> updated scene size.
///
/// \param transition <code>TimeInterval</code> transition time.
///
- (void)fitToViewWithNewSize:(CGSize)newSize transition:(NSTimeInterval)transition;
/// Returns the points of the camera’s bounding shape.
///
/// returns:
/// <code>[CGPoint]</code> array of points.
- (NSArray<NSValue *> * _Nonnull)getVertices SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface SKTiledSceneCamera (SWIFT_EXTENSION(SKTiled))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


@interface SKTiledSceneCamera (SWIFT_EXTENSION(SKTiled))
/// Handler for mouse click events.
/// \param event <code>NSEvent</code> mouse event.
///
- (void)mouseDown:(NSEvent * _Nonnull)event;
/// Track mouse movement in the scene. Location is in local space, so
/// coordinate origin will be the center of the current window.
/// \param event <code>NSEvent</code> mouse event.
///
- (void)mouseMoved:(NSEvent * _Nonnull)event;
- (void)mouseUp:(NSEvent * _Nonnull)event;
/// Manage mouse wheel zooming. Need to make sure that lastLocation is a location in <em>this</em> node.
- (void)scrollWheel:(NSEvent * _Nonnull)event;
- (void)scenePositionChanged:(NSEvent * _Nonnull)event;
@end


/// <h2>Overview</h2>
/// The <code>SKTilemap</code> class defines a container for managing layers, tiles (sprites),
/// vector objects & images. Tile data is stored in <code>SKTileset</code> tile sets.
/// <h3>Usage</h3>
/// Maps can be loaded with the class function <code>SKTilemap.load(tmxFile:)</code>:
/// \code
/// if let tilemap = SKTilemap.load(tmxFile: "myfile.tmx") {
///    scene.addChild(tilemap)
/// }
///
/// \endcode<h3>Properties</h3>
/// \code
/// let mapSize    = tilemap.size          // returns the size of the map (tiles).
/// let renderSize = tilemap.sizeInPoints  // returns the size of the map (pixels).
/// let tileSize   = tilemap.tileSize      // returns the map tile size (pixels).
///
/// \endcode
SWIFT_CLASS("_TtC7SKTiled9SKTilemap")
@interface SKTilemap : SKNode
/// File path.
@property (nonatomic, copy) NSURL * _Null_unspecified url;
/// Unique id.
@property (nonatomic, copy) NSString * _Nonnull uuid;
/// Tiled application version.
@property (nonatomic, copy) NSString * _Null_unspecified tiledversion;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
@property (nonatomic, copy) NSString * _Null_unspecified type;
@property (nonatomic, copy) NSString * _Null_unspecified displayName;
/// Size of map (in tiles).
@property (nonatomic) CGSize size;
/// Tile size (in pixels).
@property (nonatomic) CGSize tileSize;
/// Scaling value for text objects, etc.
@property (nonatomic) CGFloat renderQuality;
@property (nonatomic) CGFloat speed;
@property (nonatomic) NSInteger hexsidelength;
@property (nonatomic) CGRect bounds;
@property (nonatomic) CGFloat worldScale;
@property (nonatomic) CGFloat currentZoom;
/// Allow camera zoom.
@property (nonatomic) BOOL allowZoom;
/// Allow camera movement.
@property (nonatomic) BOOL allowMovement;
/// Minimum zoom level for the map.
@property (nonatomic) CGFloat minZoom;
/// Mximum zoom level for the map.
@property (nonatomic) CGFloat maxZoom;
/// Ignore custom properties.
@property (nonatomic) BOOL ignoreProperties;
/// Layer count.
@property (nonatomic, readonly) NSInteger layerCount;
/// Default z-position range between layers.
@property (nonatomic) CGFloat zDeltaForLayers;
@property (nonatomic) CGFloat bufferSize;
/// Returns a flattened array of child layers.
@property (nonatomic, readonly, copy) NSArray<SKTiledLayerObject *> * _Nonnull layers;
/// Ignore Tiled background color.
@property (nonatomic) BOOL ignoreBackground;
/// Optional background color (read from the Tiled file)
@property (nonatomic, strong) NSColor * _Nullable backgroundColor;
/// Overlay color.
@property (nonatomic, strong) NSColor * _Nonnull overlayColor;
@property (nonatomic, strong) NSColor * _Nonnull objectColor;
@property (nonatomic, strong) NSColor * _Nonnull color;
@property (nonatomic, strong) NSColor * _Nonnull gridColor;
@property (nonatomic, strong) NSColor * _Nonnull frameColor;
@property (nonatomic, strong) NSColor * _Nonnull highlightColor;
@property (nonatomic, strong) NSColor * _Nonnull navigationColor;
/// dynamics
@property (nonatomic) CGVector gravity;
/// Objects under the mouse cursor.
@property (nonatomic, copy) NSArray<SKNode *> * _Nonnull focusObjects;
/// Map frame.
@property (nonatomic, readonly) CGRect frame;
/// Object vertices.
- (NSArray<NSValue *> * _Nonnull)getVertices SWIFT_WARN_UNUSED_RESULT;
/// Size of the map in points.
@property (nonatomic, readonly) CGSize sizeInPoints;
/// Returns the last GID for all of the tilesets.
@property (nonatomic, readonly) NSInteger lastGID;
/// Returns the last index for all tilesets.
@property (nonatomic, readonly) NSInteger lastIndex;
/// Returns the last (highest) z-position in the map.
@property (nonatomic, readonly) CGFloat lastZPosition;
/// Tile overlap amount. 1 is typically a good value.
@property (nonatomic) CGFloat tileOverlap;
/// Global property to show/hide all <code>SKTileObject</code> objects.
@property (nonatomic) BOOL showObjects;
/// Show objects for the given layers.
/// \param forLayers <code>[SKTiledLayerObject]</code> include nested layers.
///
///
/// returns:
/// <code>[SKTileLayer]</code> array of tile layers.
- (void)showObjectsForLayers:(NSArray<SKTiledLayerObject *> * _Nonnull)forLayers;
/// Return all tile layers. If recursive is false, only returns top-level layers.
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKTileLayer]</code> array of tile layers.
- (NSArray<SKTileLayer *> * _Nonnull)tileLayersWithRecursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Return all object groups. If recursive is false, only returns top-level layers.
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKObjectGroup]</code> array of object groups.
- (NSArray<SKObjectGroup *> * _Nonnull)objectGroupsWithRecursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Return all image layers. If recursive is false, only returns top-level layers.
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKImageLayer]</code> array of image layers.
- (NSArray<SKImageLayer *> * _Nonnull)imageLayersWithRecursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Return all group layers. If recursive is false, only returns top-level layers.
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKGroupLayer]</code> array of image layers.
- (NSArray<SKGroupLayer *> * _Nonnull)groupLayersWithRecursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Convenience property to return all group layers.
@property (nonatomic, readonly, copy) NSArray<SKGroupLayer *> * _Nonnull groupLayers;
/// Global antialiasing of lines
@property (nonatomic) BOOL antialiasLines;
/// Global tile count
@property (nonatomic, readonly) NSInteger tileCount;
/// Pauses the node, and colors all of its children darker.
@property (nonatomic, getter=isPaused) BOOL paused;
/// Initialize with dictionary attributes from xml parser.
/// \param attributes <code>Dictionary</code> attributes dictionary.
///
///
/// returns:
/// <code>SKTileMapNode?</code>
- (nullable instancetype)initWithAttributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Returns a point for a given coordinate in the layer, with optional offset values for x/y.
/// \param coord <code>CGPoint</code> tile coordinate.
///
/// \param offsetX <code>CGFloat</code> x-offset value.
///
/// \param offsetY <code>CGFloat</code> y-offset value.
///
///
/// returns:
/// <code>CGPoint</code> point in layer.
- (CGPoint)pointForCoordinateWithCoord:(CGPoint)coord offsetX:(CGFloat)offsetX offsetY:(CGFloat)offsetY SWIFT_WARN_UNUSED_RESULT;
/// Returns a tile coordinate for a given vector_int2 coordinate.
/// \param vec2 <code>int2</code> vector int2 coordinate.
///
///
/// returns:
/// <code>CGPoint</code> position in layer.
- (CGPoint)pointForCoordinateWithVec2:(swift_int2)vec2 SWIFT_WARN_UNUSED_RESULT;
/// Returns a tile coordinate for a given point in the layer.
/// \param point <code>CGPoint</code> point in layer.
///
///
/// returns:
/// <code>CGPoint</code> tile coordinate.
- (CGPoint)coordinateForPoint:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of child layers, sorted by index (first is lowest, last is highest).
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKTiledLayerObject]</code> array of layers.
- (NSArray<SKTiledLayerObject *> * _Nonnull)getLayersWithRecursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Returns all content layers (ie. not groups). Sorted by zPosition in scene.
///
/// returns:
/// <code>[SKTiledLayerObject]</code> array of layers.
- (NSArray<SKTiledLayerObject *> * _Nonnull)getContentLayers SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of layer names.
///
/// returns:
/// <code>[String]</code> layer names.
- (NSArray<NSString *> * _Nonnull)layerNames SWIFT_WARN_UNUSED_RESULT;
/// Remove a layer from the current layers set.
/// \param layer <code>SKTiledLayerObject</code> layer object.
///
///
/// returns:
/// <code>SKTiledLayerObject?</code> removed layer.
- (SKTiledLayerObject * _Nullable)removeLayer:(SKTiledLayerObject * _Nonnull)layer SWIFT_WARN_UNUSED_RESULT;
/// Create and add a new tile layer.
/// \param named <code>String</code> layer name.
///
/// \param group <code>SKGroupLayer?</code> optional group layer.
///
///
/// returns:
/// <code>SKTileLayer</code> new layer.
- (SKTileLayer * _Nonnull)newTileLayerWithNamed:(NSString * _Nonnull)named group:(SKGroupLayer * _Nullable)group SWIFT_WARN_UNUSED_RESULT;
/// Create and add a new object group.
/// \param named <code>String</code> layer name.
///
/// \param group <code>SKGroupLayer?</code> optional group layer.
///
///
/// returns:
/// <code>SKObjectGroup</code> new layer.
- (SKObjectGroup * _Nonnull)newObjectGroupWithNamed:(NSString * _Nonnull)named group:(SKGroupLayer * _Nullable)group SWIFT_WARN_UNUSED_RESULT;
/// Create and add a new image layer.
/// \param named <code>String</code> layer name.
///
/// \param group <code>SKGroupLayer?</code> optional group layer.
///
///
/// returns:
/// <code>SKImageLayer</code> new layer.
- (SKImageLayer * _Nonnull)newImageLayerWithNamed:(NSString * _Nonnull)named group:(SKGroupLayer * _Nullable)group SWIFT_WARN_UNUSED_RESULT;
/// Create and add a new group layer.
/// \param named <code>String</code> layer name.
///
/// \param group <code>SKGroupLayer?</code> optional group layer.
///
///
/// returns:
/// <code>SKGroupLayer</code> new layer.
- (SKGroupLayer * _Nonnull)newGroupLayerWithNamed:(NSString * _Nonnull)named group:(SKGroupLayer * _Nullable)group SWIFT_WARN_UNUSED_RESULT;
/// Return layers matching the given name.
/// \param name <code>String</code> tile layer name.
///
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKTiledLayerObject]</code> layer objects.
- (NSArray<SKTiledLayerObject *> * _Nonnull)getLayersWithNamed:(NSString * _Nonnull)layerName recursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Return layers with names matching the given prefix.
/// \param withPrefix <code>String</code> prefix to match.
///
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKTiledLayerObject]</code> layer objects.
- (NSArray<SKTiledLayerObject *> * _Nonnull)getLayersWithPrefix:(NSString * _Nonnull)withPrefix recursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Return layers at the given path.
/// \param atPath <code>String</code> layer path.
///
///
/// returns:
/// <code>[SKTiledLayerObject]</code> layer objects.
- (NSArray<SKTiledLayerObject *> * _Nonnull)getLayersAtPath:(NSString * _Nonnull)atPath SWIFT_WARN_UNUSED_RESULT;
/// Returns a layer matching the given UUID.
/// \param uuid <code>String</code> tile layer UUID.
///
///
/// returns:
/// <code>SKTiledLayerObject?</code> layer object.
- (SKTiledLayerObject * _Nullable)getLayerWithID:(NSString * _Nonnull)uuid SWIFT_WARN_UNUSED_RESULT;
/// Returns a layer given the index (0 being the lowest).
/// \param index <code>Int</code> layer index.
///
///
/// returns:
/// <code>SKTiledLayerObject?</code> layer object.
- (SKTiledLayerObject * _Nullable)getLayerAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Return layers assigned a custom <code>type</code> property.
/// \param ofType <code>String</code> layer type.
///
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKTiledLayerObject]</code> array of layers.
- (NSArray<SKTiledLayerObject *> * _Nonnull)getLayersOfType:(NSString * _Nonnull)ofType recursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Return tile layers matching the given name. If recursive is false, only returns top-level layers.
/// \param named <code>String</code> tile layer name.
///
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKTileLayer]</code> array of tile layers.
- (NSArray<SKTileLayer *> * _Nonnull)tileLayersWithNamed:(NSString * _Nonnull)layerName recursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Return tile layers with names matching the given prefix. If recursive is false, only returns top-level layers.
/// \param withPrefix <code>String</code> prefix to match.
///
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKTileLayer]</code> array of tile layers.
- (NSArray<SKTileLayer *> * _Nonnull)tileLayersWithPrefix:(NSString * _Nonnull)withPrefix recursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Returns a tile layer at the given index, otherwise, nil.
/// \param atIndex <code>Int</code> layer index.
///
///
/// returns:
/// <code>SKTileLayer?</code> matching tile layer.
- (SKTileLayer * _Nullable)tileLayerAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Return object groups matching the given name. If recursive is false, only returns top-level layers.
/// \param named <code>String</code> tile layer name.
///
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKObjectGroup]</code> array of object groups.
- (NSArray<SKObjectGroup *> * _Nonnull)objectGroupsWithNamed:(NSString * _Nonnull)layerName recursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Return object groups with names matching the given prefix. If recursive is false, only returns top-level layers.
/// \param withPrefix <code>String</code> prefix to match.
///
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKObjectGroup]</code> array of object groups.
- (NSArray<SKObjectGroup *> * _Nonnull)objectGroupsWithPrefix:(NSString * _Nonnull)withPrefix recursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Returns an object group at the given index, otherwise, nil.
/// \param atIndex <code>Int</code> layer index.
///
///
/// returns:
/// <code>SKObjectGroup?</code> matching group layer.
- (SKObjectGroup * _Nullable)objectGroupAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Return image layers matching the given name. If recursive is false, only returns top-level layers.
/// \param named <code>String</code> tile layer name.
///
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKImageLayer]</code> array of image layers.
- (NSArray<SKImageLayer *> * _Nonnull)imageLayersWithNamed:(NSString * _Nonnull)layerName recursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Return image layers with names matching the given prefix. If recursive is false, only returns top-level layers.
/// \param withPrefix <code>String</code> prefix to match.
///
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKImageLayer]</code> array of image layers.
- (NSArray<SKImageLayer *> * _Nonnull)imageLayersWithPrefix:(NSString * _Nonnull)withPrefix recursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Returns an image layer at the given index, otherwise, nil.
/// \param atIndex <code>Int</code> layer index.
///
///
/// returns:
/// <code>SKImageLayer?</code> matching image layer.
- (SKImageLayer * _Nullable)imageLayerAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Return group layers matching the given name. If recursive is false, only returns top-level layers.
/// \param named <code>String</code> tile layer name.
///
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKGroupLayer]</code> array of group layers.
- (NSArray<SKGroupLayer *> * _Nonnull)groupLayersWithNamed:(NSString * _Nonnull)layerName recursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Return group layers with names matching the given prefix. If recursive is false, only returns top-level layers.
/// \param withPrefix <code>String</code> prefix to match.
///
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKGroupLayer]</code> array of group layers.
- (NSArray<SKGroupLayer *> * _Nonnull)groupLayersWithPrefix:(NSString * _Nonnull)withPrefix recursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Returns an group layer at the given index, otherwise, nil.
/// \param atIndex <code>Int</code> layer index.
///
///
/// returns:
/// <code>SKGroupLayer?</code> matching group layer.
- (SKGroupLayer * _Nullable)groupLayerAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Return tiles at the given point (all tile layers).
/// \param point <code>CGPoint</code> position in tilemap.
///
///
/// returns:
/// <code>[SKTile]</code> array of tiles.
- (NSArray<SKTile *> * _Nonnull)tilesAtPoint:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
/// Return tiles at the given coordinate (all tile layers).
/// \param coord <code>CGPoint</code> coordinate.
///
///
/// returns:
/// <code>[SKTile]</code> array of tiles.
- (NSArray<SKTile *> * _Nonnull)tilesAtCoord:(CGPoint)coord SWIFT_WARN_UNUSED_RESULT;
/// Return tiles at the given coordinate (all tile layers).
/// \param x <code>Int</code> x-coordinate.
///
/// \param y <code>Int</code> - y-coordinate.
///
///
/// returns:
/// <code>[SKTile]</code> array of tiles.
- (NSArray<SKTile *> * _Nonnull)tilesAt:(NSInteger)x :(NSInteger)y SWIFT_WARN_UNUSED_RESULT;
/// Returns a tile at the given coordinate from a layer.
/// \param coord <code>CGPoint</code> tile coordinate.
///
/// \param inLayer <code>String?</code> layer name.
///
///
/// returns:
/// <code>SKTile?</code> tile, or nil.
- (SKTile * _Nullable)tileAtCoord:(CGPoint)coord inLayer:(NSString * _Nullable)named SWIFT_WARN_UNUSED_RESULT;
/// Returns a tile at the given coordinate from a layer.
/// \param x <code>Int</code> tile x-coordinate.
///
/// \param y <code>Int</code> tile y-coordinate.
///
/// \param named <code>String?</code> layer name.
///
///
/// returns:
/// <code>SKTile?</code> tile, or nil.
- (SKTile * _Nullable)tileAt:(NSInteger)x :(NSInteger)y inLayer:(NSString * _Nullable)named SWIFT_WARN_UNUSED_RESULT;
/// Returns all tiles in the map. If recursive is false, only returns tiles from top-level layers.
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKTile]</code> array of tiles.
- (NSArray<SKTile *> * _Nonnull)getTilesWithRecursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Returns tiles with a property of the given type. If recursive is false, only returns tiles from top-level layers.
/// \param ofType <code>String</code> type.
///
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKTile]</code> array of tiles.
- (NSArray<SKTile *> * _Nonnull)getTilesOfType:(NSString * _Nonnull)ofType recursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Returns tiles with the given global id. If recursive is false, only returns tiles from top-level layers.
/// \param globalID <code>Int</code> tile globla id.
///
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKTile]</code> array of tiles.
- (NSArray<SKTile *> * _Nonnull)getTilesWithGlobalID:(NSInteger)globalID recursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Returns tiles with a property of the given type & value. If recursive is false, only returns tiles from top-level layers.
/// \param named <code>String</code> property name.
///
/// \param value <code>Any</code> property value.
///
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKTile]</code> array of tiles.
- (NSArray<SKTile *> * _Nonnull)getTilesWithProperty:(NSString * _Nonnull)named :(id _Nonnull)value recursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of all animated tile objects.
///
/// returns:
/// <code>[SKTile]</code> array of tiles.
- (NSArray<SKTile *> * _Nonnull)animatedTilesWithRecursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Return the top-most tile at the given coordinate.
/// \param coord <code>CGPoint</code> coordinate.
///
///
/// returns:
/// <code>SKTile?</code> first tile in layers.
- (SKTile * _Nullable)firstTileAtCoord:(CGPoint)coord SWIFT_WARN_UNUSED_RESULT;
/// Return obejects at the given point (all object groups).
/// \param coord <code>CGPoint</code> coordinate.
///
///
/// returns:
/// <code>[SKTileObject]</code> array of objects.
- (NSArray<SKTileObject *> * _Nonnull)objectsAtPoint:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
/// Return all of the current tile objects. If recursive is false, only returns objects from top-level layers.
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKTileObject]</code> array of objects.
- (NSArray<SKTileObject *> * _Nonnull)getObjectsWithRecursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Return objects matching a given type. If recursive is false, only returns objects from top-level layers.
/// \param ofType <code>String</code> object type to query.
///
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKTileObject]</code> array of objects.
- (NSArray<SKTileObject *> * _Nonnull)getObjectsOfType:(NSString * _Nonnull)ofType recursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Return objects matching a given name. If recursive is false, only returns objects from top-level layers.
/// \param named <code>String</code> object name to query.
///
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKTileObject]</code> array of objects.
- (NSArray<SKTileObject *> * _Nonnull)getObjectsWithNamed:(NSString * _Nonnull)named recursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Return objects with the given text value. If recursive is false, only returns objects from top-level layers.
/// \param withText <code>String</code> text value.
///
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKTileObject]</code> array of objects.
- (NSArray<SKTileObject *> * _Nonnull)getObjectsWithText:(NSString * _Nonnull)text recursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Returns an object with the given id.
/// \param id <code>Int</code> Object id.
///
///
/// returns:
/// <code>SKTileObject?</code>
- (SKTileObject * _Nullable)getObjectWithID:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Return objects with a tile id. If recursive is false, only returns objects from top-level layers.
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKTileObject]</code> objects with a tile gid.
- (NSArray<SKTileObject *> * _Nonnull)tileObjectsWithRecursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Return text objects. If recursive is false, only returns objects from top-level layers.
/// \param recursive <code>Bool</code> include nested layers.
///
///
/// returns:
/// <code>[SKTileObject]</code> text objects.
- (NSArray<SKTileObject *> * _Nonnull)textObjectsWithRecursive:(BOOL)recursive SWIFT_WARN_UNUSED_RESULT;
/// Returns a mouse event location in the default layer. (negative-y space).
/// <em>Position is in converted space</em>
/// \param point <code>CGPoint</code> scene point.
///
///
/// returns:
/// <code>CGPoint</code> converted point in layer coordinate system.
- (CGPoint)mouseLocationWithEvent:(NSEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
/// Returns the tile coordinate at a mouse event location.
/// \param event <code>NSEvent</code> mouse event location.
///
///
/// returns:
/// <code>CGPoint</code> converted point in layer coordinate system.
- (CGPoint)coordinateAtMouseEventWithEvent:(NSEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
/// Called when parser has finished reading the map.
/// \param timeStarted <code>Date</code> render start time.
///
/// \param tasks <code>Int</code>  number of tasks to complete.
///
- (void)didFinishParsingWithTimeStarted:(NSDate * _Nonnull)timeStarted tasks:(NSInteger)tasks;
/// Called when parser has finished rendering the map.
/// \param timeStarted <code>Date</code> render start time.
///
- (void)didFinishRenderingWithTimeStarted:(NSDate * _Nonnull)timeStarted;
/// Update the map as each frame is rendered.
/// \param currentTime <code>TimeInterval</code> update interval.
///
- (void)update:(NSTimeInterval)currentTime;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface SKTilemap (SWIFT_EXTENSION(SKTiled))
/// Parse properties from the Tiled TMX file.
- (void)parsePropertiesWithCompletion:(void (^ _Nullable)(void))completion;
@end


@interface SKTilemap (SWIFT_EXTENSION(SKTiled))
/// Initialize the grid graph with an array of walkable tiles.
/// \param layers <code>[SKTileLayer]</code> array of tile layers.
///
/// \param walkable <code>[SKTile]</code> array of walkable tiles.
///
/// \param obstacles <code>[SKTile]</code> array of obstacle tiles.
///
/// \param diagonalsAllowed <code>Bool</code> allow diagonal movement in the grid.
///
/// \param nodeClass <code>String?</code> graph node type.
///
- (void)gridGraphForLayers:(NSArray<SKTileLayer *> * _Nonnull)layers walkable:(NSArray<SKTile *> * _Nonnull)walkable obstacle:(NSArray<SKTile *> * _Nonnull)obstacle diagonalsAllowed:(BOOL)diagonalsAllowed nodeClass:(NSString * _Nullable)nodeClass;
@end


@interface SKTilemap (SWIFT_EXTENSION(SKTiled))
/// Return tiles & objects at the given point in the map.
/// \param point <code>CGPoint</code> position in tilemap.
///
///
/// returns:
/// <code>[SKNode]</code> array of tiles.
- (NSArray<SKNode *> * _Nonnull)renderableObjectsAtPoint:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
@end


@interface SKTilemap (SWIFT_EXTENSION(SKTiled))
/// Returns an array of all child layers, sorted by index (first is lowest, last is highest).
///
/// returns:
/// <code>[SKTiledLayerObject]</code> array of layers.
- (NSArray<SKTiledLayerObject *> * _Nonnull)allLayers SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("use `getLayers()` instead");
/// Returns a named tile layer from the layers set.
/// \param name <code>String</code> tile layer name.
///
///
/// returns:
/// <code>SKTiledLayerObject?</code> layer object.
- (SKTiledLayerObject * _Nullable)getLayerWithNamed:(NSString * _Nonnull)layerName SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("use `getLayers(named:)` instead");
/// Returns a named tile layer if it exists, otherwise, nil.
/// \param named <code>String</code> tile layer name.
///
///
/// returns:
/// <code>SKTileLayer?</code>
- (SKTileLayer * _Nullable)tileLayerWithNamed:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("use `tileLayers(named:)` instead");
/// Returns a named object group if it exists, otherwise, nil.
/// \param named <code>String</code> tile layer name.
///
///
/// returns:
/// <code>SKObjectGroup?</code>
- (SKObjectGroup * _Nullable)objectGroupWithNamed:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("use `objectGroups(named:)` instead");
/// Output a summary of the current scenes layer data.
- (void)debugLayersWithReverse:(BOOL)reverse SWIFT_DEPRECATED_MSG("use `mapStatistics(default:)` instead");
@end


@interface SKTilemap (SWIFT_EXTENSION(SKTiled))
- (void)cameraBoundsChangedWithBounds:(CGRect)bounds position:(CGPoint)position zoom:(CGFloat)zoom;
- (void)cameraPositionChangedWithNewPosition:(CGPoint)newPosition;
- (void)cameraZoomChangedWithNewZoom:(CGFloat)newZoom;
- (void)sceneDoubleClickedWithEvent:(NSEvent * _Nonnull)event;
- (void)mousePositionChangedWithEvent:(NSEvent * _Nonnull)event;
@end


@interface SKTilemap (SWIFT_EXTENSION(SKTiled))
/// String representing the map name.
@property (nonatomic, readonly, copy) NSString * _Nonnull mapName;
@property (nonatomic, readonly) CGFloat width;
@property (nonatomic, readonly) CGFloat height;
/// Current tile width value.
@property (nonatomic, readonly) CGFloat tileWidth;
/// Current tile height value.
@property (nonatomic, readonly) CGFloat tileHeight;
@property (nonatomic, readonly) CGFloat tileWidthHalf;
@property (nonatomic, readonly) CGFloat tileHeightHalf;
@property (nonatomic, readonly) CGSize sizeHalved;
@property (nonatomic, readonly) CGSize tileSizeHalved;
@property (nonatomic, readonly) BOOL staggerX;
@property (nonatomic, readonly) BOOL staggerEven;
@property (nonatomic, readonly) CGFloat sideLengthX;
@property (nonatomic, readonly) CGFloat sideLengthY;
@property (nonatomic, readonly) CGFloat sideOffsetX;
@property (nonatomic, readonly) CGFloat sideOffsetY;
@property (nonatomic, readonly) CGFloat columnWidth;
@property (nonatomic, readonly) CGFloat rowHeight;
/// String representation of the map.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Debug string representation of the map.
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Returns an array of tiles/objects.
///
/// returns:
/// <code>[SKNode]</code> array of child objects.
- (NSArray<SKNode *> * _Nonnull)renderableObjects SWIFT_WARN_UNUSED_RESULT;
/// Dump a summary of the current tilemap’s layer statistics.
/// \param defaul <code>Bool</code> include the map’s default layer.
///
- (void)mapStatisticsWithDefault:(BOOL)default_;
@end


SWIFT_CLASS("_TtC7SKTiled9TileShape")
@interface TileShape : SKShapeNode
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Run an action that removes the node after a set duration.
- (void)cleanup;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface TileShape (SWIFT_EXTENSION(SKTiled))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@property (nonatomic, readonly) NSInteger hashValue;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
